<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		* root-context.xml 파일
		서버 구동과 동시에 읽히는 web.xml 파일 다음으로 읽히는 문서 (2번째로 읽힘)
		서버 구동 직후에 바로 세팅해야하는 내용들을 기술하는 공간
		ex) DB 연동 설정, 트랜잭션 처리 설정, 내외부 모듈 설정, ...
		
		* root-context.xml 파일의 설정 방법
		beans 태그로 감싸져있음 -> 내부에 bean 태그들 작성
		bean: "도구" (자바 객체)
			  그동안은 자바 객체가 필요할 경우 일일이 new ~ 구문을 이용해서 객체를 생성해줬음
			  이제는 스플이이 알아서 객체를 생성해주고 관리할 수 있게
			  어느 타입의(자바 클래스) 어느 이름의 객체(객체명)를 앞으로 사용할건지 작성
	-->
	
	<!-- DB 연결 설정 3단계 -->
	
	<!-- 1단계: DB 연결을 위한 도구(bean)를 설정 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
	<!-- 어느 DB에 접속할건지를 설정 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="SPRING"/>
		<property name="password" value="SPRING"/>
	</bean>
	
	<!--
		해당 이 객체가 앞으로 필요할 때 마다 내부적으로 스프링에 의해 이 코드가 실행됨
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName = "oracle.jdbc.driver.OracleDriver"
				   ...
				   ...
		dataSource.setPassword = "SPRING"
	-->
	<!-- 2단계: MYBATIS SPRING에서 제공하는 SQL 명령어 실행을 위한 도구 (SqlSessionTemplate) 설정 -->
	
	<!--
		* 순수 마이바티스의 경우 명령을 실행하기 위해 SqlSession 객체가 필요했지만
		Spring에서의 마이바티스 연동시에는 명령을 실행하기 위해 SqlSessioNTemplate 객체가 필요함
		-> SqlSessionFactoryBean 객체를 통해 생성해야 함
	-->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	
		<!-- MYBATIS 설정 파일의 위치를 지정하여 설정 값들을 가지고 오곘다. -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- DB 연결을 위한 도구를 참조하겠다. -->
  		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
		해당 이객체가 필요할 때 마다 내부적으로 이 코드가 실행됨
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource(dataSource);
	-->
	
	<!-- 3단계: MYBATIS SPRING에서 제공하는 SQL 명령어 실행을 위한 도구(SqlSessionTemplate) 설정 2. -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<!-- 2단계에서 만들었던 SqlSessionFactoryBean 객체를 넘기면서 SqlSessionTemplate 객체를 생성하겠다. -->
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!--
		해당 이 객체가 필요할 때 마다 내부적으로 이 코드가 시행됨
		SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	-->
	
	<!-- 
		property: setter 주입
		constructor-arg: 생성자 주입
	-->
	
		<!-- 파일업로드 관련 bean 등록 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		
		<!-- defaultEncoding : 업로드되는 파일에 대한 인코딩 처리를 어떻게 할건지를 지정 -->
		<property name="defaultEncoding" value="UTF-8" />
		
		<!-- 
			maxUploadSize : 한번에 업로드되는 파일의 총 용량
			- 총 파일의 최대 용량은 10MByte로 지정
			  10MByte == 10 * 1024 * 1024 Byte
			    단, xml에서는 계산식이 적용되지 않으므로 직접 계산한 결과를 넣어야함
			  10MByte == 10,485,760 => 대략 10,000,000
		 -->
		<property name="maxUploadSize" value="10000000" />
		<!-- maxInMemorySize : 메모리 상의 파일 최대 용량 -->
		<property name="maxInMemorySize" value="10000000" />
	</bean>
</beans>
